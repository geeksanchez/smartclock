#ifndef MatrixTask_h
#define MatrixTask_h

#include <Scheduler.h>

#ifndef MSG_BUFFER_SIZE
#define MSG_BUFFER_SIZE (256)
#endif

#define TIME_BUFFER_SIZE (12)
#define DATE_BUFFER_SIZE (12)

const uint8_t font3x5[] {
        0x00, 0x00, 0x00, 0x00, 0x02, // .
        0x02, 0x02, 0x02, 0x00, 0x02, // !
        0x02, 0x05, 0x07, 0x05, 0x05, // "
        0x02, 0x05, 0x07, 0x05, 0x05, // #
        0x02, 0x05, 0x07, 0x05, 0x05, // $
        0x02, 0x05, 0x07, 0x05, 0x05, // %
        0x02, 0x05, 0x07, 0x05, 0x05, // &
        0x02, 0x05, 0x07, 0x05, 0x05, // '
        0x02, 0x05, 0x07, 0x05, 0x05, // (
        0x02, 0x05, 0x07, 0x05, 0x05, // )
        0x02, 0x05, 0x07, 0x05, 0x05, // *
        0x02, 0x05, 0x07, 0x05, 0x05, // +
        0x02, 0x05, 0x07, 0x05, 0x05, // ,
        0x02, 0x05, 0x07, 0x05, 0x05, // -
        0x02, 0x05, 0x07, 0x05, 0x05, // .
        0x02, 0x05, 0x07, 0x05, 0x05, // /
        0x07, 0x05, 0x05, 0x05, 0x07, // 0
        0x02, 0x06, 0x02, 0x02, 0x07, // 1
        0x07, 0x01, 0x07, 0x04, 0x07, // 2
        0x07, 0x01, 0x07, 0x01, 0x07, // 3
        0x05, 0x05, 0x07, 0x01, 0x01, // 4
        0x07, 0x04, 0x07, 0x01, 0x07, // 5
        0x07, 0x04, 0x07, 0x05, 0x07, // 6
        0x07, 0x01, 0x01, 0x01, 0x01, // 7
        0x07, 0x05, 0x07, 0x05, 0x07, // 8
        0x07, 0x05, 0x07, 0x01, 0x07, // 9
        0x02, 0x05, 0x07, 0x05, 0x05, // :
        0x02, 0x05, 0x07, 0x05, 0x05, // ;
        0x02, 0x05, 0x07, 0x05, 0x05, // <
        0x02, 0x05, 0x07, 0x05, 0x05, // =
        0x02, 0x05, 0x07, 0x05, 0x05, // >
        0x02, 0x05, 0x07, 0x05, 0x05, // ?
        0x02, 0x05, 0x07, 0x05, 0x05, // @
        0x02, 0x05, 0x07, 0x05, 0x05, // A
        0x02, 0x05, 0x07, 0x05, 0x05, // B
        0x02, 0x05, 0x07, 0x05, 0x05, // C
        0x02, 0x05, 0x07, 0x05, 0x05, // D
        0x02, 0x05, 0x07, 0x05, 0x05, // E
        0x02, 0x05, 0x07, 0x05, 0x05, // F
        0x02, 0x05, 0x07, 0x05, 0x05, // G
        0x02, 0x05, 0x07, 0x05, 0x05, // H
        0x02, 0x05, 0x07, 0x05, 0x05, // I
        0x02, 0x05, 0x07, 0x05, 0x05, // J
        0x02, 0x05, 0x07, 0x05, 0x05, // K
        0x02, 0x05, 0x07, 0x05, 0x05, // L
        0x02, 0x05, 0x07, 0x05, 0x05, // M
        0x02, 0x05, 0x07, 0x05, 0x05, // N
        0x02, 0x05, 0x07, 0x05, 0x05, // O
        0x02, 0x05, 0x07, 0x05, 0x05, // P
        0x02, 0x05, 0x07, 0x05, 0x05, // Q
        0x02, 0x05, 0x07, 0x05, 0x05, // R
        0x02, 0x05, 0x07, 0x05, 0x05, // S
        0x02, 0x05, 0x07, 0x05, 0x05, // T
        0x02, 0x05, 0x07, 0x05, 0x05, // U
        0x02, 0x05, 0x07, 0x05, 0x05, // V
        0x02, 0x05, 0x07, 0x05, 0x05, // W
        0x02, 0x05, 0x07, 0x05, 0x05, // X
        0x02, 0x05, 0x07, 0x05, 0x05, // Y
        0x02, 0x05, 0x07, 0x05, 0x05, // Z
        0x02, 0x05, 0x07, 0x05, 0x05, // [
        0x02, 0x05, 0x07, 0x05, 0x05, // '\'
        0x02, 0x05, 0x07, 0x05, 0x05, // A
        0x02, 0x05, 0x07, 0x05, 0x05, // A
        0x02, 0x05, 0x07, 0x05, 0x05, // A
        0x02, 0x05, 0x07, 0x05, 0x05, // A
};

class MatrixTask : public Task
{

    private:
        char mtxMsg[MSG_BUFFER_SIZE];
        const uint8_t *Font;
        void selectFont(const uint8_t *font);
        byte charWidth(const char letter);
        void drawString(int bX, int bY, const char *bChars, byte length,
                                                     byte fgcolour, byte bgcolour);

    protected:
        void setup();
        void loop();

    public:
        void setBrightness(uint8_t lux);
        void DrawIcon(uint8_t icon);
        void DrawMsg(char *msg, byte length);
        void DrawTime(char *msg);
        void DrawDate(char *msg);
        void (*notifyMatrix)(char *msg);
};

#endif